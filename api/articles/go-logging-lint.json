{"title":"Go语言项目开发规范 之 日志规范","uid":"b81759ce043682066ca823838f04004e","slug":"go-logging-lint","date":"2023-02-02T12:50:39.000Z","updated":"2023-02-02T12:50:39.000Z","comments":true,"path":"api/articles/go-logging-lint.json","keywords":null,"cover":"https://i.328888.xyz/2023/02/03/IKcpL.jpeg","content":"<ul>\n<li>本文摘自<a href=\"https://juejin.cn/book/7176608782871429175\">《从零开发企业级 Go 应用》</a></li>\n</ul>\n<h2 id=\"日志规范\"><a href=\"#日志规范\" class=\"headerlink\" title=\"日志规范\"></a>日志规范</h2><h3 id=\"日志规范-1\"><a href=\"#日志规范-1\" class=\"headerlink\" title=\"日志规范\"></a>日志规范</h3><ul>\n<li>日志包统一使用 <code>github.com/marmotedu/miniblog/internal/pkg/log</code>;</li>\n<li>使用结构化的日志打印格式：<code>log.Infow</code>, <code>log.Warnw</code>, <code>log.Errorw</code> 等; 例如：<code>log.Infow(&quot;Update post function called&quot;)</code>;</li>\n<li>日志均以大写开头，结尾不跟 <code>.</code>，例如：<code>log.Infow(&quot;Update post function called&quot;)</code>;</li>\n<li>使用过去时，例如：<code>Could not delete B</code> 而不是 <code>Cannot delete B</code>;</li>\n<li>遵循日志级别规范：<ul>\n<li>Debug 级别的日志使用 <code>log.Debugw</code>;</li>\n<li>Info 级别的日志使用 <code>log.Infow</code>;</li>\n<li>Warning 级别的日志使用 <code>log.Warnw</code>;</li>\n<li>Error 级别的日志使用 <code>log.Errorw</code>;</li>\n<li>Panic 级别的日志使用 <code>log.Panicw</code>;</li>\n<li>Fatal 级别的日志使用 <code>log.Fatalw</code>.</li>\n</ul>\n</li>\n<li>日志设置：<ul>\n<li>开发测试环境：日志级别设置为 <code>debug</code>、日志格式可根据需要设置为 <code>console</code> &#x2F; <code>json</code>、开启 caller；</li>\n<li>生产环境：日志级别设置为 <code>info</code>、日志格式设置为 <code>json</code>、开启 caller。（注意：上线初期，为了方便现网排障，日志级别可以设置为 <code>debug</code>）</li>\n</ul>\n</li>\n<li>在记录日志时，不要输出一些敏感信息，例如密码、密钥等。</li>\n<li>如果在具有 <code>context.Context</code> 参数的函数&#x2F;方法中，调用日志函数，建议使用 <code>log.L(ctx).Infow()</code> 进行日志记录。</li>\n</ul>\n","text":" 本文摘自《从零开发企业级 Go 应用》 日志规范日志规范 日志包统一使用 github.com/marmotedu/miniblog/internal/pkg/log; 使用结构化的日志打印格式：log.Infow, log.Warnw, log.Errorw 等; 例如：lo...","link":"","photos":[],"count_time":{"symbolsCount":732,"symbolsTime":"1 mins."},"categories":[{"name":"Golang","slug":"Golang","count":8,"path":"api/categories/Golang.json"}],"tags":[{"name":"开发规范","slug":"开发规范","count":7,"path":"api/tags/开发规范.json"},{"name":"Golang","slug":"Golang","count":8,"path":"api/tags/Golang.json"},{"name":"日志规范","slug":"日志规范","count":1,"path":"api/tags/日志规范.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%A5%E5%BF%97%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">日志规范</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%97%A5%E5%BF%97%E8%A7%84%E8%8C%83-1\"><span class=\"toc-text\">日志规范</span></a></li></ol></li></ol>","author":{"name":"G","slug":"blog-author","avatar":"https://froggyfriends.mypinata.cloud/ipfs/QmaTJi8B2cH5QKiXz1XneEuDaL1WC71uuq2A1X9t4sfacT","link":"/","description":"一位正在重塑知识的技术人 <br />","socials":{"github":"https://github.com/gzwillyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"telegram":{"icon":"/svg/telegram.svg","link":"https://t.me/gzwilly"}}}},"mapped":true,"prev_post":{"title":"Go语言项目开发规范 之 错误规范","uid":"eaecbf1374ac3af5317abae9d46a227d","slug":"go-errorcode-lint","date":"2023-02-02T12:50:39.000Z","updated":"2023-02-02T12:50:39.000Z","comments":true,"path":"api/articles/go-errorcode-lint.json","keywords":null,"cover":"https://i.328888.xyz/2023/02/03/IKcpL.jpeg","text":"错误码规范错误码是用户定位及解决问题的重要手段之一，当应用发生异常时，用户根据错误码及文档中的错误码描述和解决方案就可以快速定位并解决问题。 错误码命名规范 遵循驼峰命名法； 错误码分为两级。例如，InvalidParameter.BindError，以 . 号分隔。其中，第一级...","link":"","photos":[],"count_time":{"symbolsCount":568,"symbolsTime":"1 mins."},"categories":[{"name":"Golang","slug":"Golang","count":8,"path":"api/categories/Golang.json"}],"tags":[{"name":"开发规范","slug":"开发规范","count":7,"path":"api/tags/开发规范.json"},{"name":"Golang","slug":"Golang","count":8,"path":"api/tags/Golang.json"},{"name":"错误规范","slug":"错误规范","count":1,"path":"api/tags/错误规范.json"}],"author":{"name":"G","slug":"blog-author","avatar":"https://froggyfriends.mypinata.cloud/ipfs/QmaTJi8B2cH5QKiXz1XneEuDaL1WC71uuq2A1X9t4sfacT","link":"/","description":"一位正在重塑知识的技术人 <br />","socials":{"github":"https://github.com/gzwillyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"telegram":{"icon":"/svg/telegram.svg","link":"https://t.me/gzwilly"}}}}},"next_post":{"title":"Go语言项目开发规范 之 代码规范","uid":"e386f25fe35d3cc208c03de6e86811c8","slug":"go-code-lint","date":"2023-02-02T12:50:39.000Z","updated":"2023-02-02T12:50:39.000Z","comments":true,"path":"api/articles/go-code-lint.json","keywords":null,"cover":"https://i.328888.xyz/2023/02/03/IKcpL.jpeg","text":"Go 代码开发规范在Go 项目开发中，一个好的编码规范可以极大的提高代码质量。为了帮你节省时间和精力，这里我整理了一份清晰、可直接套用的 Go 编码规范，供你参考。 这份规范，是我参考了 Go 官方提供的编码规范，以及 Go 社区沉淀的一些比较合理的规范之后，加入自己的理解总结出...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"Golang","slug":"Golang","count":8,"path":"api/categories/Golang.json"}],"tags":[{"name":"开发规范","slug":"开发规范","count":7,"path":"api/tags/开发规范.json"},{"name":"Golang","slug":"Golang","count":8,"path":"api/tags/Golang.json"},{"name":"代码规范","slug":"代码规范","count":1,"path":"api/tags/代码规范.json"}],"author":{"name":"G","slug":"blog-author","avatar":"https://froggyfriends.mypinata.cloud/ipfs/QmaTJi8B2cH5QKiXz1XneEuDaL1WC71uuq2A1X9t4sfacT","link":"/","description":"一位正在重塑知识的技术人 <br />","socials":{"github":"https://github.com/gzwillyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"telegram":{"icon":"/svg/telegram.svg","link":"https://t.me/gzwilly"}}}}}}