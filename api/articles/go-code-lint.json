{"title":"Go语言项目开发规范 之 代码规范","uid":"e386f25fe35d3cc208c03de6e86811c8","slug":"go-code-lint","date":"2023-02-02T12:50:39.000Z","updated":"2023-02-02T12:50:39.000Z","comments":true,"path":"api/articles/go-code-lint.json","keywords":null,"cover":"https://i.328888.xyz/2023/02/03/IKcpL.jpeg","content":"<ul>\n<li>本文是学习《从零开发企业级 Go 应用》 的内容拷贝</li>\n<li><a href=\"https://juejin.cn/book/7176608782871429175\">课程链接</a></li>\n</ul>\n<h2 id=\"Go-代码开发规范\"><a href=\"#Go-代码开发规范\" class=\"headerlink\" title=\"Go 代码开发规范\"></a>Go 代码开发规范</h2><p>在Go 项目开发中，一个好的编码规范可以极大的提高代码质量。为了帮你节省时间和精力，这里我整理了一份清晰、可直接套用的 Go 编码规范，供你参考。</p>\n<p>这份规范，是我参考了 Go 官方提供的编码规范，以及 Go 社区沉淀的一些比较合理的规范之后，加入自己的理解总结出的，它比很多公司内部的规范更全面，你掌握了，以后在面试大厂的时候，或者在大厂里写代码的时候，都会让人高看你一眼，觉得你code很专业。</p>\n<p>这份编码规范中包含代码风格、命名规范、注释规范、类型、控制结构、函数、GOPATH 设置规范、依赖管理和最佳实践九类规范。如果你觉得这些规范内容太多了，看完一遍也记不住，这完全没关系。你可以多看几遍，也可以在用到时把它翻出来，在实际应用中掌握。这篇特别放送的内容，更多是作为写代码时候的一个参考手册。</p>\n<h2 id=\"1-代码风格\"><a href=\"#1-代码风格\" class=\"headerlink\" title=\"1. 代码风格\"></a>1. 代码风格</h2><h3 id=\"1-1-代码格式\"><a href=\"#1-1-代码格式\" class=\"headerlink\" title=\"1.1 代码格式\"></a>1.1 代码格式</h3><ul>\n<li>代码都必须用 <code>gofmt</code> 进行格式化。</li>\n<li>运算符和操作数之间要留空格。</li>\n<li>建议一行代码不超过120个字符，超过部分，请采用合适的换行方式换行。但也有些例外场景，例如import行、工具自动生成的代码、带tag的struct字段。</li>\n<li>文件长度不能超过800行。</li>\n<li>函数长度不能超过80行。</li>\n<li>import规范<ul>\n<li>代码都必须用<code>goimports</code>进行格式化（建议将代码Go代码编辑器设置为：保存时运行 <code>goimports</code>）。</li>\n<li>不要使用相对路径引入包，例如 <code>import ../util/net</code> 。</li>\n<li>包名称与导入路径的最后一个目录名不匹配时，或者多个相同包名冲突时，则必须使用导入别名。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// bad</span>\n<span class=\"token string\">\"github.com/dgrijalva/jwt-go/v4\"</span>\n\n<span class=\"token comment\">//good</span>\njwt <span class=\"token string\">\"github.com/dgrijalva/jwt-go/v4\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre><code>- 导入的包建议进行分组，匿名包的引用使用一个新的分组，并对匿名包引用进行说明。\n</code></pre>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token comment\">// go 标准包</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\n\t<span class=\"token comment\">// 第三方包</span>\n    <span class=\"token string\">\"github.com/jinzhu/gorm\"</span>\n    <span class=\"token string\">\"github.com/spf13/cobra\"</span>\n    <span class=\"token string\">\"github.com/spf13/viper\"</span>\n\n\t<span class=\"token comment\">// 匿名包单独分组，并对匿名包引用进行说明</span>\n    <span class=\"token comment\">// import mysql driver</span>\n    <span class=\"token boolean\">_</span> <span class=\"token string\">\"github.com/jinzhu/gorm/dialects/mysql\"</span>\n\n\t<span class=\"token comment\">// 内部包</span>\n    v1 <span class=\"token string\">\"github.com/marmotedu/api/apiserver/v1\"</span>\n    metav1 <span class=\"token string\">\"github.com/marmotedu/apimachinery/pkg/meta/v1\"</span>\n    <span class=\"token string\">\"github.com/marmotedu/iam/pkg/cli/genericclioptions\"</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"1-2-声明、初始化和定义\"><a href=\"#1-2-声明、初始化和定义\" class=\"headerlink\" title=\"1.2 声明、初始化和定义\"></a>1.2 声明、初始化和定义</h3><p>当函数中需要使用到多个变量时，可以在函数开始处使用<code>var</code>声明。在函数外部声明必须使用 <code>var</code> ，不要采用 <code>:=</code> ，容易踩到变量的作用域的问题。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\tWidth  <span class=\"token builtin\">int</span>\n\tHeight <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>在初始化结构引用时，请使用<code>&amp;T&#123;&#125;</code>代替<code>new(T)</code>，以使其与结构体初始化一致。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// bad</span>\nsptr <span class=\"token operator\">:=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span>\nsptr<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">\"bar\"</span>\n\n<span class=\"token comment\">// good</span>\nsptr <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">&#123;</span>Name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>struct 声明和初始化格式采用多行，定义如下。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> User <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span>\n    Username  <span class=\"token builtin\">string</span>\n    Email     <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span>\n\nuser <span class=\"token operator\">:=</span> User<span class=\"token punctuation\">&#123;</span>\n\tUsername<span class=\"token punctuation\">:</span> <span class=\"token string\">\"belm\"</span><span class=\"token punctuation\">,</span>\n\tEmail<span class=\"token punctuation\">:</span> <span class=\"token string\">\"nosbelm@qq.com\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>相似的声明放在一组，同样适用于常量、变量和类型声明。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"a\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"b\"</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"a\"</span>\n  <span class=\"token string\">\"b\"</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>尽可能指定容器容量，以便为容器预先分配内存，例如：</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">v <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\nv <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>在顶层，使用标准var关键字。请勿指定类型，除非它与表达式的类型不同。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">var</span> _s <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token function\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"A\"</span> <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">var</span> _s <span class=\"token operator\">=</span> <span class=\"token function\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 由于 F 已经明确了返回一个字符串类型，因此我们没有必要显式指定_s 的类型</span>\n<span class=\"token comment\">// 还是那种类型</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"A\"</span> <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>对于未导出的顶层常量和变量，使用<code>_</code>作为前缀。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n  defaultHost <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1\"</span>\n  defaultPort <span class=\"token operator\">=</span> <span class=\"token number\">8080</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n  _defaultHost <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1\"</span>\n  _defaultPort <span class=\"token operator\">=</span> <span class=\"token number\">8080</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>嵌入式类型（例如 mutex）应位于结构体内的字段列表的顶部，并且必须有一个空行将嵌入式字段与常规字段分隔开。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">type</span> Client <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n  version <span class=\"token builtin\">int</span>\n  http<span class=\"token punctuation\">.</span>Client\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">type</span> Client <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n  http<span class=\"token punctuation\">.</span>Client\n\n  version <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"1-3-错误处理\"><a href=\"#1-3-错误处理\" class=\"headerlink\" title=\"1.3 错误处理\"></a>1.3 错误处理</h3><ul>\n<li><code>error</code>作为函数的值返回，必须对<code>error</code>进行处理，或将返回值赋值给明确忽略。对于<code>defer xx.Close()</code>可以不用显式处理。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// normal code</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// bad</span>\n<span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// good</span>\n <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><code>error</code>作为函数的值返回且有多个返回值的时候，<code>error</code>必须是最后一个参数。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">error</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// normal code</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// normal code</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>尽早进行错误处理，并尽早返回，减少嵌套。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// error code</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// normal code</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// error handling</span>\n\t<span class=\"token keyword\">return</span> err\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// normal code</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>如果需要在 if 之外使用函数调用的结果，则应采用下面的方式。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">if</span> v<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// error handling</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// good</span>\nv<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// error handling</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>错误要单独判断，不与其他逻辑组合判断。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// bad</span>\nv<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">||</span> v  <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// error handling</span>\n\t<span class=\"token keyword\">return</span> err\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// good</span>\nv<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// error handling</span>\n\t<span class=\"token keyword\">return</span> err\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">if</span> v <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// error handling</span>\n\t<span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invalid value v\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>如果返回值需要初始化，则采用下面的方式。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">v<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// error handling</span>\n    <span class=\"token keyword\">return</span> <span class=\"token comment\">// or continue.</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>错误描述建议<ul>\n<li>错误描述用小写字母开头，结尾不要加标点符号，例如：<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// bad</span>\nerrors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Redis connection failed\"</span><span class=\"token punctuation\">)</span>\nerrors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"redis connection failed.\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// good</span>\nerrors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"redis connection failed\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>告诉用户他们可以做什么，而不是告诉他们不能做什么。</li>\n<li>当声明一个需求时，用must 而不是should。例如，<code>must be greater than 0、must match regex &#39;[a-z]+&#39;</code>。</li>\n<li>当声明一个格式不对时，用must not。例如，<code>must not contain</code>。</li>\n<li>当声明一个动作时用may not。例如，<code>may not be specified when otherField is empty、only name may be specified</code>。</li>\n<li>引用文字字符串值时，请在单引号中指示文字。例如，<code>ust not contain &#39;..&#39;</code>。</li>\n<li>当引用另一个字段名称时，请在反引号中指定该名称。例如，must be greater than <code>request</code>。</li>\n<li>指定不等时，请使用单词而不是符号。例如，<code>must be less than 256、must be greater than or equal to 0 (不要用 larger than、bigger than、more than、higher than)</code>。</li>\n<li>指定数字范围时，请尽可能使用包含范围。</li>\n<li>建议 Go 1.13 以上，error 生成方式为 <code>fmt.Errorf(&quot;module xxx: %w&quot;, err)</code>。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-4-panic处理\"><a href=\"#1-4-panic处理\" class=\"headerlink\" title=\"1.4 panic处理\"></a>1.4 panic处理</h3><ul>\n<li>在业务逻辑处理中禁止使用panic。</li>\n<li>在main包中，只有当程序完全不可运行时使用panic，例如无法打开文件、无法连接数据库导致程序无法正常运行。</li>\n<li>在main包中，使用 <code>log.Fatal</code> 来记录错误，这样就可以由log来结束程序，或者将panic抛出的异常记录到日志文件中，方便排查问题。</li>\n<li>可导出的接口一定不能有panic。</li>\n<li>包内建议采用error而不是panic来传递错误。</li>\n</ul>\n<h3 id=\"1-5-单元测试\"><a href=\"#1-5-单元测试\" class=\"headerlink\" title=\"1.5 单元测试\"></a>1.5 单元测试</h3><ul>\n<li>单元测试文件名命名规范为 <code>example_test.go</code>。</li>\n<li>每个重要的可导出函数都要编写测试用例。</li>\n<li>因为单元测试文件内的函数都是不对外的，所以可导出的结构体、函数等可以不带注释。</li>\n<li>如果存在 <code>func (b *Bar) Foo</code> ，单测函数可以为 <code>func TestBar_Foo</code>。</li>\n</ul>\n<h3 id=\"1-6-类型断言失败处理\"><a href=\"#1-6-类型断言失败处理\" class=\"headerlink\" title=\"1.6 类型断言失败处理\"></a>1.6 类型断言失败处理</h3><ul>\n<li>type assertion 的单个返回值针对不正确的类型将产生 panic。请始终使用 “comma ok”的惯用法。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// bad</span>\nt <span class=\"token operator\">:=</span> n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// good</span>\nt<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// error handling</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"2-命名规范\"><a href=\"#2-命名规范\" class=\"headerlink\" title=\"2. 命名规范\"></a>2. 命名规范</h2><p>命名规范是代码规范中非常重要的一部分，一个统一的、短小的、精确的命名规范可以大大提高代码的可读性，也可以借此规避一些不必要的Bug。</p>\n<h3 id=\"2-1-包命名\"><a href=\"#2-1-包命名\" class=\"headerlink\" title=\"2.1 包命名\"></a>2.1 包命名</h3><ul>\n<li>包名必须和目录名一致，尽量采取有意义、简短的包名，不要和标准库冲突。</li>\n<li>包名全部小写，没有大写或下划线，使用多级目录来划分层级。</li>\n<li>项目名可以通过中划线来连接多个单词。</li>\n<li>包名以及包所在的目录名，不要使用复数，例如，是<code>net/url</code>，而不是<code>net/urls</code>。</li>\n<li>不要用 common、util、shared 或者 lib 这类宽泛的、无意义的包名。</li>\n<li>包名要简单明了，例如 net、time、log。</li>\n</ul>\n<h3 id=\"2-2-函数命名\"><a href=\"#2-2-函数命名\" class=\"headerlink\" title=\"2.2 函数命名\"></a>2.2 函数命名</h3><ul>\n<li>函数名采用驼峰式，首字母根据访问控制决定使用大写或小写，例如：<code>MixedCaps</code>或者<code>mixedCaps</code>。</li>\n<li>代码生成工具自动生成的代码(如<code>xxxx.pb.go</code>)和为了对相关测试用例进行分组，而采用的下划线(如<code>TestMyFunction_WhatIsBeingTested</code>)排除此规则。</li>\n</ul>\n<h3 id=\"2-3-文件命名\"><a href=\"#2-3-文件命名\" class=\"headerlink\" title=\"2.3 文件命名\"></a>2.3 文件命名</h3><ul>\n<li>文件名要简短有意义。</li>\n<li>文件名应小写，并使用下划线分割单词。</li>\n</ul>\n<h3 id=\"2-4-结构体命名\"><a href=\"#2-4-结构体命名\" class=\"headerlink\" title=\"2.4 结构体命名\"></a>2.4 结构体命名</h3><ul>\n<li>采用驼峰命名方式，首字母根据访问控制决定使用大写或小写，例如<code>MixedCaps</code>或者<code>mixedCaps</code>。</li>\n<li>结构体名不应该是动词，应该是名词，比如 <code>Node</code>、<code>NodeSpec</code>。</li>\n<li>避免使用Data、Info这类无意义的结构体名。</li>\n<li>结构体的声明和初始化应采用多行，例如：</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// User 多行声明</span>\n<span class=\"token keyword\">type</span> User <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n    Name  <span class=\"token builtin\">string</span>\n    Email <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 多行初始化</span>\nu <span class=\"token operator\">:=</span> User<span class=\"token punctuation\">&#123;</span>\n    UserName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"belm\"</span><span class=\"token punctuation\">,</span>\n    Email<span class=\"token punctuation\">:</span>    <span class=\"token string\">\"nosbelm@qq.com\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-5-接口命名\"><a href=\"#2-5-接口命名\" class=\"headerlink\" title=\"2.5 接口命名\"></a>2.5 接口命名</h3><ul>\n<li>接口命名的规则，基本和结构体命名规则保持一致：<ul>\n<li>单个函数的接口名以 “er””作为后缀（例如Reader，Writer），有时候可能导致蹩脚的英文，但是没关系。</li>\n<li>两个函数的接口名以两个函数名命名，例如ReadWriter。</li>\n<li>三个以上函数的接口名，类似于结构体名。</li>\n</ul>\n</li>\n</ul>\n<p>例如：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; Seeking to an offset before the start of the file is an error.\n&#x2F;&#x2F; Seeking to any positive offset is legal, but the behavior of subsequent\n&#x2F;&#x2F; I&#x2F;O operations on the underlying object is implementation-dependent.\ntype Seeker interface &#123;\n    Seek(offset int64, whence int) (int64, error)\n&#125;\n\n&#x2F;&#x2F; ReadWriter is the interface that groups the basic Read and Write methods.\ntype ReadWriter interface &#123;\n    Reader\n    Writer\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-6-变量命名\"><a href=\"#2-6-变量命名\" class=\"headerlink\" title=\"2.6 变量命名\"></a>2.6 变量命名</h3><ul>\n<li>变量名必须遵循驼峰式，首字母根据访问控制决定使用大写或小写。</li>\n<li>在相对简单（对象数量少、针对性强）的环境中，可以将一些名称由完整单词简写为单个字母，例如：<ul>\n<li>user 可以简写为 u；</li>\n<li>userID 可以简写 uid。</li>\n</ul>\n</li>\n<li>特有名词时，需要遵循以下规则：<ul>\n<li>如果变量为私有，且特有名词为首个单词，则使用小写，如 apiClient。</li>\n<li>其他情况都应当使用该名词原有的写法，如 APIClient、repoID、UserID。</li>\n</ul>\n</li>\n</ul>\n<p>下面列举了一些常见的特有名词。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; A GonicMapper that contains a list of common initialisms taken from golang&#x2F;lint\nvar LintGonicMapper &#x3D; GonicMapper&#123;\n    &quot;API&quot;:   true,\n    &quot;ASCII&quot;: true,\n    &quot;CPU&quot;:   true,\n    &quot;CSS&quot;:   true,\n    &quot;DNS&quot;:   true,\n    &quot;EOF&quot;:   true,\n    &quot;GUID&quot;:  true,\n    &quot;HTML&quot;:  true,\n    &quot;HTTP&quot;:  true,\n    &quot;HTTPS&quot;: true,\n    &quot;ID&quot;:    true,\n    &quot;IP&quot;:    true,\n    &quot;JSON&quot;:  true,\n    &quot;LHS&quot;:   true,\n    &quot;QPS&quot;:   true,\n    &quot;RAM&quot;:   true,\n    &quot;RHS&quot;:   true,\n    &quot;RPC&quot;:   true,\n    &quot;SLA&quot;:   true,\n    &quot;SMTP&quot;:  true,\n    &quot;SSH&quot;:   true,\n    &quot;TLS&quot;:   true,\n    &quot;TTL&quot;:   true,\n    &quot;UI&quot;:    true,\n    &quot;UID&quot;:   true,\n    &quot;UUID&quot;:  true,\n    &quot;URI&quot;:   true,\n    &quot;URL&quot;:   true,\n    &quot;UTF8&quot;:  true,\n    &quot;VM&quot;:    true,\n    &quot;XML&quot;:   true,\n    &quot;XSRF&quot;:  true,\n    &quot;XSS&quot;:   true,\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>若变量类型为bool类型，则名称应以Has，Is，Can或Allow开头，例如：</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> hasConflict <span class=\"token builtin\">bool</span>\n<span class=\"token keyword\">var</span> isExist <span class=\"token builtin\">bool</span>\n<span class=\"token keyword\">var</span> canManage <span class=\"token builtin\">bool</span>\n<span class=\"token keyword\">var</span> allowGitHook <span class=\"token builtin\">bool</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>局部变量应当尽可能短小，比如使用buf指代buffer，使用i指代index。</li>\n<li>代码生成工具自动生成的代码可排除此规则(如<code>xxx.pb.go</code>里面的Id)</li>\n</ul>\n<h3 id=\"2-7-常量命名\"><a href=\"#2-7-常量命名\" class=\"headerlink\" title=\"2.7 常量命名\"></a>2.7 常量命名</h3><ul>\n<li>常量名必须遵循驼峰式，首字母根据访问控制决定使用大写或小写。</li>\n<li>如果是枚举类型的常量，需要先创建相应类型：</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Code defines an error code type.</span>\n<span class=\"token keyword\">type</span> Code <span class=\"token builtin\">int</span>\n\n<span class=\"token comment\">// Internal errors.</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// ErrUnknown - 0: An unknown error occurred.</span>\n    ErrUnknown Code <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span>\n    <span class=\"token comment\">// ErrFatal - 1: An fatal error occurred.</span>\n    ErrFatal\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-8-Error的命名\"><a href=\"#2-8-Error的命名\" class=\"headerlink\" title=\"2.8 Error的命名\"></a>2.8 Error的命名</h3><ul>\n<li>Error类型应该写成FooError的形式。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> ExitError <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// ....</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>Error变量写成ErrFoo的形式。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> ErrFormat <span class=\"token operator\">=</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unknown format\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"3-注释规范\"><a href=\"#3-注释规范\" class=\"headerlink\" title=\"3. 注释规范\"></a>3. 注释规范</h2><ul>\n<li>每个可导出的名字都要有注释，该注释对导出的变量、函数、结构体、接口等进行简要介绍。</li>\n<li>全部使用单行注释，禁止使用多行注释。</li>\n<li>和代码的规范一样，单行注释不要过长，禁止超过 120 字符，超过的请使用换行展示，尽量保持格式优雅。</li>\n<li>注释必须是完整的句子，以需要注释的内容作为开头，句点作为结尾，<code>格式为 // 名称 描述.</code>。例如：</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// bad</span>\n<span class=\"token comment\">// logs the flags in the flagset.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">PrintFlags</span><span class=\"token punctuation\">(</span>flags <span class=\"token operator\">*</span>pflag<span class=\"token punctuation\">.</span>FlagSet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// normal code</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token comment\">// PrintFlags logs the flags in the flagset.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">PrintFlags</span><span class=\"token punctuation\">(</span>flags <span class=\"token operator\">*</span>pflag<span class=\"token punctuation\">.</span>FlagSet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// normal code</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>所有注释掉的代码在提交code review前都应该被删除，否则应该说明为什么不删除，并给出后续处理建议。</p>\n</li>\n<li><p>在多段注释之间可以使用空行分隔加以区分，如下所示：</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Package superman implements methods for saving the world.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Experience has shown that a small number of procedures can prove</span>\n<span class=\"token comment\">// helpful when attempting to save the world.</span>\n<span class=\"token keyword\">package</span> superman<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-1-包注释\"><a href=\"#3-1-包注释\" class=\"headerlink\" title=\"3.1 包注释\"></a>3.1 包注释</h3><ul>\n<li>每个包都有且仅有一个包级别的注释。</li>\n<li>包注释统一用 &#x2F;&#x2F; 进行注释，格式为 <code>// Package 包名 包描述</code>，例如：</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Package genericclioptions contains flags which can be added to you command, bound, completed, and produce</span>\n<span class=\"token comment\">// useful helper functions.</span>\n<span class=\"token keyword\">package</span> genericclioptions<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-2-变量-x2F-常量注释\"><a href=\"#3-2-变量-x2F-常量注释\" class=\"headerlink\" title=\"3.2 变量&#x2F;常量注释\"></a>3.2 变量&#x2F;常量注释</h3><ul>\n<li>每个可导出的变量&#x2F;常量都必须有注释说明，<code>格式为// 变量名 变量描述</code>，例如：</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// ErrSigningMethod defines invalid signing method error.</span>\n<span class=\"token keyword\">var</span> ErrSigningMethod <span class=\"token operator\">=</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid signing method\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li>出现大块常量或变量定义时，可在前面注释一个总的说明，然后在每一行常量的前一行或末尾详细注释该常量的定义，例如：<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Code must start with 1xxxxx.</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// ErrSuccess - 200: OK.</span>\n    ErrSuccess <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span> <span class=\"token operator\">+</span> <span class=\"token number\">100001</span>\n\n    <span class=\"token comment\">// ErrUnknown - 500: Internal server error.</span>\n    ErrUnknown\n\n    <span class=\"token comment\">// ErrBind - 400: Error occurred while binding the request body to the struct.</span>\n    ErrBind\n\n    <span class=\"token comment\">// ErrValidation - 400: Validation failed.</span>\n    ErrValidation\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"3-3-结构体注释\"><a href=\"#3-3-结构体注释\" class=\"headerlink\" title=\"3.3 结构体注释\"></a>3.3 结构体注释</h3><ul>\n<li>每个需要导出的结构体或者接口都必须有注释说明，格式为 <code>// 结构体名 结构体描述.</code>。</li>\n<li>结构体内的可导出成员变量名，如果意义不明确，必须要给出注释，放在成员变量的前一行或同一行的末尾。例如：</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// User represents a user restful resource. It is also used as gorm model.</span>\n<span class=\"token keyword\">type</span> User <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// Standard object's metadata.</span>\n    metav1<span class=\"token punctuation\">.</span>ObjectMeta <span class=\"token string\">`json:\"metadata,omitempty\"`</span>\n\n    Nickname <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"nickname\" gorm:\"column:nickname\"`</span>\n    Password <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"password\" gorm:\"column:password\"`</span>\n    Email    <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"email\" gorm:\"column:email\"`</span>\n    Phone    <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"phone\" gorm:\"column:phone\"`</span>\n    IsAdmin  <span class=\"token builtin\">int</span>    <span class=\"token string\">`json:\"isAdmin,omitempty\" gorm:\"column:isAdmin\"`</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-4-方法注释\"><a href=\"#3-4-方法注释\" class=\"headerlink\" title=\"3.4 方法注释\"></a>3.4 方法注释</h3><p>每个需要导出的函数或者方法都必须有注释，格式为&#x2F;&#x2F; 函数名 函数描述.，例如：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// BeforeUpdate run before update database record.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>Policy<span class=\"token punctuation\">)</span> <span class=\"token function\">BeforeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// normal code</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-5-类型注释\"><a href=\"#3-5-类型注释\" class=\"headerlink\" title=\"3.5 类型注释\"></a>3.5 类型注释</h3><ul>\n<li>每个需要导出的类型定义和类型别名都必须有注释说明，格式为 <code>// 类型名 类型描述.</code>，例如：</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Code defines an error code type.</span>\n<span class=\"token keyword\">type</span> Code <span class=\"token builtin\">int</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"4-类型\"><a href=\"#4-类型\" class=\"headerlink\" title=\"4. 类型\"></a>4. 类型</h2><h3 id=\"4-1-字符串\"><a href=\"#4-1-字符串\" class=\"headerlink\" title=\"4.1 字符串\"></a>4.1 字符串</h3><ul>\n<li>空字符串判断。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">if</span> s <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// normal code</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// normal code</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><code>[]byte</code>&#x2F;<code>string</code>相等比较。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">var</span> s1 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n<span class=\"token keyword\">var</span> s2 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n<span class=\"token operator\">...</span>\nbytes<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\nbytes<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">var</span> s1 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n<span class=\"token keyword\">var</span> s2 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n<span class=\"token operator\">...</span>\nbytes<span class=\"token punctuation\">.</span><span class=\"token function\">Compare</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\nbytes<span class=\"token punctuation\">.</span><span class=\"token function\">Compare</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>复杂字符串使用raw字符串避免字符转义。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// bad</span>\nregexp<span class=\"token punctuation\">.</span><span class=\"token function\">MustCompile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\.\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// good</span>\nregexp<span class=\"token punctuation\">.</span><span class=\"token function\">MustCompile</span><span class=\"token punctuation\">(</span><span class=\"token string\">`\\.`</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-2-切片\"><a href=\"#4-2-切片\" class=\"headerlink\" title=\"4.2 切片\"></a>4.2 切片</h3><ul>\n<li>空slice判断。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// normal code</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">if</span> slice <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// normal code</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面判断同样适用于map、channel。</p>\n<ul>\n<li>声明slice。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// bad</span>\ns <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\ns <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">var</span> s <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>slice复制。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">var</span> b1<span class=\"token punctuation\">,</span> b2 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> b1 <span class=\"token punctuation\">&#123;</span>\n   b2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> b1 <span class=\"token punctuation\">&#123;</span>\n   b2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">,</span> b1<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>slice新增。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">var</span> a<span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> a <span class=\"token punctuation\">&#123;</span>\n    b <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">var</span> a<span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\nb <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> a<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-3-结构体\"><a href=\"#4-3-结构体\" class=\"headerlink\" title=\"4.3 结构体\"></a>4.3 结构体</h3><ul>\n<li>struct初始化。</li>\n</ul>\n<p>struct以多行格式初始化。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> user <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tId   <span class=\"token builtin\">int64</span>\n\tName <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span>\n\nu1 <span class=\"token operator\">:=</span> user<span class=\"token punctuation\">&#123;</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Colin\"</span><span class=\"token punctuation\">&#125;</span>\n\nu2 <span class=\"token operator\">:=</span> user<span class=\"token punctuation\">&#123;</span>\n    Id<span class=\"token punctuation\">:</span>   <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    Name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Lex\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"5-控制结构\"><a href=\"#5-控制结构\" class=\"headerlink\" title=\"5. 控制结构\"></a>5. 控制结构</h2><h3 id=\"5-1-if\"><a href=\"#5-1-if\" class=\"headerlink\" title=\"5.1 if\"></a>5.1 if</h3><ul>\n<li>if 接受初始化语句，约定如下方式建立局部变量。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">loadConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// error handling</span>\n\t<span class=\"token keyword\">return</span> err\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>if 对于bool类型的变量，应直接进行真假判断。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> isAllow <span class=\"token builtin\">bool</span>\n<span class=\"token keyword\">if</span> isAllow <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// normal code</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-2-for\"><a href=\"#5-2-for\" class=\"headerlink\" title=\"5.2 for\"></a>5.2 for</h3><ul>\n<li>采用短声明建立局部变量。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">sum <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n    sum <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>不要在 for 循环里面使用 defer，defer只有在函数退出时才会执行。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">for</span> file <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> files <span class=\"token punctuation\">&#123;</span>\n\tfd<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">defer</span> fd<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// normal code</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">for</span> file <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> files <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tfd<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> err\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">defer</span> fd<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\">// normal code</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-3-range\"><a href=\"#5-3-range\" class=\"headerlink\" title=\"5.3 range\"></a>5.3 range</h3><ul>\n<li>如果只需要第一项（key），就丢弃第二个。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">for</span> key <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> keys <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// normal code</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>如果只需要第二项，则把第一项置为下划线。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">sum <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> array <span class=\"token punctuation\">&#123;</span>\n    sum <span class=\"token operator\">+=</span> value\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-4-switch\"><a href=\"#5-4-switch\" class=\"headerlink\" title=\"5.4 switch\"></a>5.4 switch</h3><ul>\n<li>必须要有default。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">switch</span> os <span class=\"token operator\">:=</span> runtime<span class=\"token punctuation\">.</span>GOOS<span class=\"token punctuation\">;</span> os <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"linux\"</span><span class=\"token punctuation\">:</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Linux.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"darwin\"</span><span class=\"token punctuation\">:</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OS X.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s.\\n\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-5-goto\"><a href=\"#5-5-goto\" class=\"headerlink\" title=\"5.5 goto\"></a>5.5 goto</h3><ul>\n<li>业务代码禁止使用 goto 。</li>\n<li>框架或其他底层源码尽量不用。</li>\n</ul>\n<h2 id=\"6-函数\"><a href=\"#6-函数\" class=\"headerlink\" title=\"6. 函数\"></a>6. 函数</h2><ul>\n<li>传入变量和返回变量以小写字母开头。</li>\n<li>函数参数个数不能超过5个。</li>\n<li>函数分组与顺序</li>\n<li>函数应按粗略的调用顺序排序。</li>\n<li>同一文件中的函数应按接收者分组。</li>\n<li>尽量采用值传递，而非指针传递。</li>\n<li>传入参数是 map、slice、chan、interface ，不要传递指针。</li>\n</ul>\n<h3 id=\"6-1-函数参数\"><a href=\"#6-1-函数参数\" class=\"headerlink\" title=\"6.1 函数参数\"></a>6.1 函数参数</h3><ul>\n<li>如果函数返回相同类型的两个或三个参数，或者如果从上下文中不清楚结果的含义，使用命名返回，其他情况不建议使用命名返回，例如：</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">coordinate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// normal code</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>传入变量和返回变量都以小写字母开头。</li>\n<li>尽量用值传递，非指针传递。</li>\n<li>参数数量均不能超过5个。</li>\n<li>多返回值最多返回三个，超过三个请使用 struct。</li>\n</ul>\n<h3 id=\"6-2-defer\"><a href=\"#6-2-defer\" class=\"headerlink\" title=\"6.2 defer\"></a>6.2 defer</h3><ul>\n<li>当存在资源创建时，应紧跟defer释放资源(可以大胆使用defer，defer在Go1.14版本中，性能大幅提升，defer的性能损耗即使在性能敏感型的业务中，也可以忽略)。</li>\n<li>先判断是否错误，再defer释放资源，例如：</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">rep<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> err\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">defer</span> resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"6-3-方法的接收器\"><a href=\"#6-3-方法的接收器\" class=\"headerlink\" title=\"6.3 方法的接收器\"></a>6.3 方法的接收器</h3><ul>\n<li>推荐以类名第一个英文首字母的小写作为接收器的命名。</li>\n<li>接收器的命名在函数超过20行的时候不要用单字符。</li>\n<li>接收器的命名不能采用me、this、self这类易混淆名称。</li>\n</ul>\n<h3 id=\"6-4-嵌套\"><a href=\"#6-4-嵌套\" class=\"headerlink\" title=\"6.4 嵌套\"></a>6.4 嵌套</h3><ul>\n<li>嵌套深度不能超过4层。</li>\n</ul>\n<h3 id=\"6-5-变量命名\"><a href=\"#6-5-变量命名\" class=\"headerlink\" title=\"6.5 变量命名\"></a>6.5 变量命名</h3><ul>\n<li>变量声明尽量放在变量第一次使用的前面，遵循就近原则。</li>\n<li>如果魔法数字出现超过两次，则禁止使用，改用一个常量代替，例如：</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// PI ...</span>\n<span class=\"token keyword\">const</span> Prise <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">getAppleCost</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> Prise <span class=\"token operator\">*</span> n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">getOrangeCost</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> Prise <span class=\"token operator\">*</span> n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"7-GOPATH-设置规范\"><a href=\"#7-GOPATH-设置规范\" class=\"headerlink\" title=\"7. GOPATH 设置规范\"></a>7. GOPATH 设置规范</h2><ul>\n<li>Go 1.11 之后，弱化了 GOPATH 规则，已有代码（很多库肯定是在1.11之前建立的）肯定符合这个规则，建议保留 GOPATH 规则，便于维护代码。</li>\n<li>建议只使用一个 GOPATH，不建议使用多个 GOPATH。如果使用多个GOPATH，编译生效的 bin 目录是在第一个 GOPATH 下。</li>\n</ul>\n<h2 id=\"8-依赖管理\"><a href=\"#8-依赖管理\" class=\"headerlink\" title=\"8. 依赖管理\"></a>8. 依赖管理</h2><ul>\n<li>Go 1.11 以上必须使用 Go Modules。</li>\n<li>使用Go Modules作为依赖管理的项目时，不建议提交vendor目录。</li>\n<li>使用Go Modules作为依赖管理的项目时，必须提交go.sum文件。</li>\n</ul>\n<h3 id=\"9-最佳实践\"><a href=\"#9-最佳实践\" class=\"headerlink\" title=\"9. 最佳实践\"></a>9. 最佳实践</h3><ul>\n<li>尽量少用全局变量，而是通过参数传递，使每个函数都是“无状态”的。这样可以减少耦合，也方便分工和单元测试。</li>\n<li>在编译时验证接口的符合性，例如：</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> LogHandler <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n  h   http<span class=\"token punctuation\">.</span>Handler\n  log <span class=\"token operator\">*</span>zap<span class=\"token punctuation\">.</span>Logger\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> <span class=\"token boolean\">_</span> http<span class=\"token punctuation\">.</span>Handler <span class=\"token operator\">=</span> LogHandler<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>服务器处理请求时，应该创建一个context，保存该请求的相关信息（如requestID），并在函数调用链中传递。</li>\n</ul>\n<h3 id=\"9-1-性能\"><a href=\"#9-1-性能\" class=\"headerlink\" title=\"9.1 性能\"></a>9.1 性能</h3><ul>\n<li>string 表示的是不可变的字符串变量，对 string 的修改是比较重的操作，基本上都需要重新申请内存。所以，如果没有特殊需要，需要修改时多使用 []byte。</li>\n<li>优先使用 strconv 而不是 fmt。</li>\n</ul>\n<h3 id=\"9-2-注意事项\"><a href=\"#9-2-注意事项\" class=\"headerlink\" title=\"9.2 注意事项\"></a>9.2 注意事项</h3><ul>\n<li>append 要小心自动分配内存，append 返回的可能是新分配的地址。</li>\n<li>如果要直接修改 map 的 value 值，则 value 只能是指针，否则要覆盖原来的值。</li>\n<li>map 在并发中需要加锁。</li>\n<li>编译过程无法检查 interface{} 的转换，只能在运行时检查，小心引起 panic。</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这里向你介绍了九类常用的编码规范。但今天的最后，我要在这里提醒你一句：规范是人定的，你也可以根据需要，制定符合你项目的规范，但同时我也建议你采纳这些业界沉淀下来的规范，并通过工具来确保规范的执行。</p>\n","text":" 本文是学习《从零开发企业级 Go 应用》 的内容拷贝 课程链接 Go 代码开发规范在Go 项目开发中，一个好的编码规范可以极大的提高代码质量。为了帮你节省时间和精力，这里我整理了一份清晰、可直接套用的 Go 编码规范，供你参考。 这份规范，是我参考了 Go 官方提供的编码规范，...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"Golang","slug":"Golang","count":8,"path":"api/categories/Golang.json"}],"tags":[{"name":"开发规范","slug":"开发规范","count":7,"path":"api/tags/开发规范.json"},{"name":"Golang","slug":"Golang","count":8,"path":"api/tags/Golang.json"},{"name":"代码规范","slug":"代码规范","count":1,"path":"api/tags/代码规范.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Go-%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">Go 代码开发规范</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC\"><span class=\"toc-text\">1. 代码风格</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">1.1 代码格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E5%A3%B0%E6%98%8E%E3%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">1.2 声明、初始化和定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\"><span class=\"toc-text\">1.3 错误处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4-panic%E5%A4%84%E7%90%86\"><span class=\"toc-text\">1.4 panic处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-5-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">1.5 单元测试</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-6-%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E5%A4%B1%E8%B4%A5%E5%A4%84%E7%90%86\"><span class=\"toc-text\">1.6 类型断言失败处理</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">2. 命名规范</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E5%8C%85%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">2.1 包命名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E5%87%BD%E6%95%B0%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">2.2 函数命名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E6%96%87%E4%BB%B6%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">2.3 文件命名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E7%BB%93%E6%9E%84%E4%BD%93%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">2.4 结构体命名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5-%E6%8E%A5%E5%8F%A3%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">2.5 接口命名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-6-%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">2.6 变量命名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-7-%E5%B8%B8%E9%87%8F%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">2.7 常量命名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-8-Error%E7%9A%84%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">2.8 Error的命名</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E6%B3%A8%E9%87%8A%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">3. 注释规范</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E5%8C%85%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">3.1 包注释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-%E5%8F%98%E9%87%8F-x2F-%E5%B8%B8%E9%87%8F%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">3.2 变量&#x2F;常量注释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-%E7%BB%93%E6%9E%84%E4%BD%93%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">3.3 结构体注释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-%E6%96%B9%E6%B3%95%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">3.4 方法注释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5-%E7%B1%BB%E5%9E%8B%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">3.5 类型注释</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">4. 类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">4.1 字符串</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-%E5%88%87%E7%89%87\"><span class=\"toc-text\">4.2 切片</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-%E7%BB%93%E6%9E%84%E4%BD%93\"><span class=\"toc-text\">4.3 结构体</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">5. 控制结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-if\"><span class=\"toc-text\">5.1 if</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-for\"><span class=\"toc-text\">5.2 for</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-range\"><span class=\"toc-text\">5.3 range</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-4-switch\"><span class=\"toc-text\">5.4 switch</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-5-goto\"><span class=\"toc-text\">5.5 goto</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">6. 函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-1-%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">6.1 函数参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-2-defer\"><span class=\"toc-text\">6.2 defer</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-3-%E6%96%B9%E6%B3%95%E7%9A%84%E6%8E%A5%E6%94%B6%E5%99%A8\"><span class=\"toc-text\">6.3 方法的接收器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-4-%E5%B5%8C%E5%A5%97\"><span class=\"toc-text\">6.4 嵌套</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-5-%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">6.5 变量命名</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-GOPATH-%E8%AE%BE%E7%BD%AE%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">7. GOPATH 设置规范</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">8. 依赖管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5\"><span class=\"toc-text\">9. 最佳实践</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-1-%E6%80%A7%E8%83%BD\"><span class=\"toc-text\">9.1 性能</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-2-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">9.2 注意事项</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"G","slug":"blog-author","avatar":"https://froggyfriends.mypinata.cloud/ipfs/QmaTJi8B2cH5QKiXz1XneEuDaL1WC71uuq2A1X9t4sfacT","link":"/","description":"一位正在重塑知识的技术人 <br />","socials":{"github":"https://github.com/gzwillyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"telegram":{"icon":"/svg/telegram.svg","link":"https://t.me/gzwilly"}}}},"mapped":true,"prev_post":{"title":"Go语言项目开发规范 之 版本规范","uid":"d66d0f629c4193825a58a03816bc2031","slug":"go-version-lint","date":"2023-02-02T12:50:39.000Z","updated":"2023-02-02T12:50:39.000Z","comments":true,"path":"api/articles/go-version-lint.json","keywords":null,"cover":"https://i.328888.xyz/2023/02/03/IKcpL.jpeg","text":" 本文是学习《从零开发企业级 Go 应用》 的内容拷贝 课程链接 版本规范语义化版本 2.0.0 规范。 ","link":"","photos":[],"count_time":{"symbolsCount":54,"symbolsTime":"1 mins."},"categories":[{"name":"Golang","slug":"Golang","count":8,"path":"api/categories/Golang.json"}],"tags":[{"name":"开发规范","slug":"开发规范","count":7,"path":"api/tags/开发规范.json"},{"name":"Golang","slug":"Golang","count":8,"path":"api/tags/Golang.json"},{"name":"版本规范","slug":"版本规范","count":1,"path":"api/tags/版本规范.json"}],"author":{"name":"G","slug":"blog-author","avatar":"https://froggyfriends.mypinata.cloud/ipfs/QmaTJi8B2cH5QKiXz1XneEuDaL1WC71uuq2A1X9t4sfacT","link":"/","description":"一位正在重塑知识的技术人 <br />","socials":{"github":"https://github.com/gzwillyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"telegram":{"icon":"/svg/telegram.svg","link":"https://t.me/gzwilly"}}}}},"next_post":{"title":"Mysql 之 使用 Prometheus 和 Grafana 监控 MySQL 性能","uid":"07709a5ec8fca245e3ed20c42a15171e","slug":"mysql-prometheus-grafana-build","date":"2023-01-22T13:58:26.000Z","updated":"2023-01-22T13:58:26.000Z","comments":true,"path":"api/articles/mysql-prometheus-grafana-build.json","keywords":null,"cover":"https://images.unsplash.com/photo-1489875347897-49f64b51c1f8","text":" 请注意，这只是一个简单搭建教程，具体应用还需要根据实际情况来调整。 基础环境 环境&#x2F;组件 版本 Mac M1虚拟机 Centos8 Prometheus 2.41.0 Grafana 9.3.2 1. Prometheus 安装与配置Prometheus 下载Prom...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"Mysql","slug":"Mysql","count":1,"path":"api/categories/Mysql.json"}],"tags":[{"name":"Prometheus","slug":"Prometheus","count":1,"path":"api/tags/Prometheus.json"},{"name":"Grafana","slug":"Grafana","count":1,"path":"api/tags/Grafana.json"},{"name":"监控","slug":"监控","count":1,"path":"api/tags/监控.json"}],"author":{"name":"G","slug":"blog-author","avatar":"https://froggyfriends.mypinata.cloud/ipfs/QmaTJi8B2cH5QKiXz1XneEuDaL1WC71uuq2A1X9t4sfacT","link":"/","description":"一位正在重塑知识的技术人 <br />","socials":{"github":"https://github.com/gzwillyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"telegram":{"icon":"/svg/telegram.svg","link":"https://t.me/gzwilly"}}}},"feature":false}}